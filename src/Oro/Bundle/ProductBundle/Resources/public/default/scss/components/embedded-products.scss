/* @theme: default; */

@use 'sass:math';

.embedded-products {
    display: flex;

    flex-wrap: wrap;
    row-gap: $embedded-list-item-offset-inner * 2;

    &.slider-enabled {
        flex-wrap: initial;
        row-gap: initial;
    }

    &.slick-dotted {
        display: block;
    }

    &__item {
        height: initial;
        display: flex;
        flex-direction: column;

        &.slick-slide {
            height: initial;
            display: flex;
            flex-direction: column;
        }

        // Styles that apply when tiles are disabled.
        &:not(.tiles-item) {
            width: math.div(100%, $embedded-products-item-count);
        }

        // We need to exclude the influence of styles when the tiles are on.
        &:not(.slick-slide):not(.tiles-item) {
            min-width: math.div(100%, $embedded-products-item-count);
        }

        .product-item__preview-image {
            width: 100%;
            max-width: initial;
            height: 100%;
        }
    }

    .slick-track {
        display: flex;
    }

    .slick-list {
        width: 100%;
    }
}

@include breakpoint('tablet-big') {
    .embedded-products {
        &__item {
            // Styles that apply when tiles are disabled.
            &:not(.tiles-item) {
                width: math.div(100%, $embedded-products-item-count-tablet-big);
            }

            // We need to exclude the influence of styles when the tiles are on.
            &:not(.slick-slide):not(.tiles-item) {
                min-width: math.div(100%, $embedded-products-item-count-tablet-big);
            }
        }
    }
}

@include breakpoint('tablet') {
    .embedded-products {
        &__item {
            // Styles that apply when tiles are disabled.
            &:not(.tiles-item) {
                width: math.div(100%, $embedded-products-item-count-tablet);
            }

            // We need to exclude the influence of styles when the tiles are on.
            &:not(.slick-slide):not(.tiles-item) {
                min-width: math.div(100%, $embedded-products-item-count-tablet);
            }
        }
    }
}

@include breakpoint('mobile-big') {
    .embedded-products {
        &.slider-enabled {
            padding-right: $embedded-products-item-offset-mobile-big;
        }

        &.slick-initialized {
            padding: 0;
        }

        .slick-list {
            padding-right: $embedded-products-item-offset-mobile-big;
        }

        &__item {
            // Styles that apply when tiles are disabled.
            &:not(.tiles-item) {
                width: math.div(100%, $embedded-products-item-width-count-mobile-big);
            }

            // We need to exclude the influence of styles when the tiles are on.
            &:not(.slick-slide):not(.tiles-item) {
                min-width: math.div(100%, $embedded-products-item-width-count-mobile-big);
            }
        }
    }
}

@include breakpoint('mobile-landscape') {
    .embedded-products {
        &.slider-enabled {
            padding-right: $embedded-products-item-offset-mobile-landscape;
        }

        &.slick-initialized {
            padding: 0;
        }

        .slick-list {
            padding-right: $embedded-products-item-offset-mobile-landscape;
        }

        &__item {
            // Styles that apply when tiles are disabled.
            &:not(.tiles-item) {
                width: math.div(100%, $embedded-products-item-count-mobile-landscape);
            }

            // We need to exclude the influence of styles when the tiles are on.
            &:not(.slick-slide):not(.tiles-item) {
                min-width: math.div(100%, $embedded-products-item-count-mobile-landscape);
            }
        }
    }
}

@include breakpoint('mobile') {
    .embedded-products {
        &.slider-enabled {
            padding-right: $embedded-products-item-count-mobile;
        }

        &.slick-initialized {
            padding: 0;
        }

        .slick-list {
            padding-right: $embedded-products-item-count-mobile;
        }
    }
}
